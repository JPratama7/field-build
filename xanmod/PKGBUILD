# Maintainer : JPratama7 <josepratama080@gmail.com>
# Contributor: zhullyb <zhullyb@outlook.com>
# Contributor: Yeqin Su <hougelangley1987@gmail.com>
# Contributor: Torge Matthies <openglfreak at googlemail dot com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: Yoshi2889 <rick.2889 at gmail dot com>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>
# Contributor: Joan Figueras <ffigue at gmail dot com>

##
## This package include headers by default
## The following variables can be customized at build time. Use env or export to change at your wish
##
##   Example: env _microarchitecture=25 use_numa=n use_tracers=n use_pds=n makepkg -sc
##
## Look inside 'choose-gcc-optimization.sh' to choose your microarchitecture
## Valid numbers between: 0 to 42
## Default is: 0 => generic
## Good option if your package is for one machine: 98 => Intel native
##                                                 99 => AMD native
  #   Available CPU microarchitectures:

  #   1) AMD K6/K6-II/K6-III
  #   2) AMD Athlon/Duron/K7
  #   3) AMD Opteron/Athlon64/Hammer/K8
  #   4) AMD Opteron/Athlon64/Hammer/K8 with SSE3
  #   5) AMD 61xx/7x50/PhenomX3/X4/II/K10
  #   6) AMD Family 10h (Barcelona)
  #   7) AMD Family 14h (Bobcat)
  #   8) AMD Family 16h (Jaguar)
  #   9) AMD Family 15h (Bulldozer)
  #  10) AMD Family 15h (Piledriver)
  #  11) AMD Family 15h (Steamroller)
  #  12) AMD Family 15h (Excavator)
  #  13) AMD Family 17h (Zen)
  #  14) AMD Family 17h (Zen 2)
  #  15) AMD Family 19h Zen 3 processors (Zen 3)
  #  16) Transmeta Crusoe
  #  17) Transmeta Efficeon
  #  18) IDT Winchip C6
  #  19) Winchip-2/Winchip-2A/Winchip-3
  #  20) AMD Elan
  #  21) Geode GX1 (Cyrix MediaGX)
  #  22) AMD Geode GX and LX
  #  23) Cyrix III or C3
  #  24) VIA C3 "Nehemiah"
  #  25) VIA C7
  #  26) Intel Pentium 4, Pentium D and older Nocona/Dempsey Xeon CPUs with Intel 64bit
  #  27) Intel Atom
  #  28) Intel Core 2 and newer Core 2 Xeons (Xeon 51xx and 53xx)
  #  29) Intel 1st Gen Core i3/i5/i7-family (Nehalem)
  #  30) Intel 1.5 Gen Core i3/i5/i7-family (Westmere)
  #  31) Intel Silvermont
  #  32) Intel Goldmont (Apollo Lake and Denverton)
  #  33) Intel Goldmont Plus (Gemini Lake)
  #  34) Intel 2nd Gen Core i3/i5/i7-family (Sandybridge)
  #  35) Intel 3rd Gen Core i3/i5/i7-family (Ivybridge)
  #  36) Intel 4th Gen Core i3/i5/i7-family (Haswell)
  #  37) Intel 5th Gen Core i3/i5/i7-family (Broadwell)
  #  38) Intel 6th Gen Core i3/i5/i7-family (Skylake)
  #  39) Intel 6th Gen Core i7/i9-family (Skylake X)
  #  40) Intel 8th Gen Core i3/i5/i7-family (Cannon Lake)
  #  41) Intel 8th Gen Core i7/i9-family (Ice Lake)
  #  42) Xeon processors in the Cascade Lake family
  #  43) Intel Xeon (Cooper Lake)
  #  44) Intel 3rd Gen 10nm++ i3/i5/i7/i9-family (Tiger Lake)
  #  45) Intel Sapphire Rapids
  #  46) Intel Rocket Lake
  #  47) Intel Alder Lake

  #  92) Generic-x86-64-v2 (Nehalem and newer)
  #  93) Generic-x86-64-v3 (Haswell and newer)
  #  94) Generic-x86-64-v4 (AVX512 CPUs)

  #  98) Intel-Native optimizations autodetected by GCC
  #  99) AMD-Native optimizations autodetected by GCC

  #   0) Generic (default)


_microarchitecture=92

## Disable NUMA since most users do not have multiple processors. Breaks CUDA/NvEnc.
## Archlinux and Xanmod enable it by default.
## Set variable "use_numa" to: n to disable (possibly increase performance)
##                             y to enable  (stock default)

use_numa=y

## For performance you can disable FUNCTION_TRACER/GRAPH_TRACER. Limits debugging and analyzing of the kernel.
## Stock Archlinux and Xanmod have this enabled. 
## Set variable "use_tracers" to: n to disable (possibly increase performance)
##                                y to enable  (stock default)

use_tracers=y

## Compiler

_compiler=clang

#####################
# CUSTOM PATCH
#####################

#fsync
_fsync=y

#futex2
_futex2=

#enable lrng
_lrng_enable=y

#Use DAMON patch
_damon=y

#Enable v4l2loopback
_v4l2=y

#Enable Winesync
_winesync=y

# CPU FREQ
_500hz=
_833hz=y
_1666hz=

#####################

# Compile ONLY used modules to VASTLYreduce the number of modules built
# and the build time.
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db script a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD read the database kept if it exists
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
if [ -z ${_localmodcfg} ]; then
  _localmodcfg=n
fi

# Tweak kernel options prior to a build via nconfig
_makenconfig=

### IMPORTANT: Do no edit below this line unless you know what you're doing

pkgbase=linux-xanmod-custom
_major=5.16
pkgver=${_major}.0
_branch=5.x
xanmod=1
pkgrel=${xanmod}
pkgdesc='Linux Xanmod. Branch with Task Type CPU Sched'
_patches_url="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/${_major}"
_jobs=$(nproc)
url="http://www.xanmod.org/"
arch=(x86_64)
license=(GPL2)
makedepends=(
  xmlto kmod inetutils bc libelf cpio perl tar xz
)

if [ "${_compiler}" = "clang" ]; then
  makedepends+=(clang llvm lld python)
  _LLVM=1
fi

options=('!strip')
_srcname="linux-${pkgver}-xanmod${xanmod}"

source=("https://cdn.kernel.org/pub/linux/kernel/v${_branch}/linux-${_major}.tar."{xz,sign}
        "https://github.com/xanmod/linux/releases/download/${pkgver}-xanmod${xanmod}/patch-${pkgver}-xanmod${xanmod}.xz"
        choose-gcc-optimization.sh
        "0001-cjktty.patch::https://raw.githubusercontent.com/zhmars/cjktty-patches/master/v${_branch}/cjktty-${_major}.patch"
        "0002-UKSM.patch::${_patches_url}/uksm-patches/0001-UKSM-for-${_major}.patch"
        "0003-zstd.patch::${_patches_url}/zstd-patches/0001-zstd-patches.patch"
        "0004-v4I2loopback.patch::${_patches_url}/v4l2loopback-patches/0001-v4l2loopback-5.16-merge-v0.12.5.patch"
        "0005-tt-sched.patch::https://raw.githubusercontent.com/hamadmarri/TT-CPU-Scheduler/master/patches/${_major}/tt-${_major}.patch"
        # "0006-clang.patch::https://raw.githubusercontent.com/ptr1337/kernel-patches/master/${_major}/0001-clang.patch"
        )

# Archlinux patches
_commit="ec9e9a4219fe221dec93fa16fddbe44a34933d8d"
_patches=()
for _patch in ${_patches[@]}; do
    #source+=("${_patch}::https://git.archlinux.org/svntogit/packages.git/plain/trunk/${_patch}?h=packages/linux&id=${_commit}")
    source+=("${_patch}::https://raw.githubusercontent.com/archlinux/svntogit-packages/${_commit}/trunk/${_patch}")
done

b2sums=('SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        # 'SKIP'
        )

export KBUILD_BUILD_HOST=${KBUILD_BUILD_HOST:-archlinux}
export KBUILD_BUILD_USER=${KBUILD_BUILD_USER:-makepkg}
export KBUILD_BUILD_TIMESTAMP=${KBUILD_BUILD_TIMESTAMP:-$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})}

prepare() {
  cd linux-${_major}

  # Apply Xanmod patch
  patch -Np1 -i ../patch-${pkgver}-xanmod${xanmod}

  msg2 "Setting version..."
  scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux-xanmod}" > localversion.20-pkgname

  # Custom patches
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    patch -Np1 -F 3 < "../$src"
  done

  # Applying configuration
  cp -vf CONFIGS/xanmod/${_compiler}/config .config

  # CONFIG_STACK_VALIDATION gives better stack traces. Also is enabled in all official kernel packages by Archlinux team
  scripts/config --enable CONFIG_STACK_VALIDATION

  # Enable IKCONFIG following Arch's philosophy
  scripts/config --enable CONFIG_IKCONFIG \
                 --enable CONFIG_IKCONFIG_PROC

  if [ "$use_tracers" = "n" ]; then
    msg2 "Disabling FUNCTION_TRACER/GRAPH_TRACER only if we are not compiling with clang..."
    if [ "${_compiler}" = "gcc" ]; then
      scripts/config --disable CONFIG_FUNCTION_TRACER \
                     --disable CONFIG_STACK_TRACER
    fi
  fi

  # enable LTO_CLANG_FULL
  if [ "${_compiler}" = "clang" ]; then
  msg2 "Enable Clang LTO FULL"
    scripts/config --disable CONFIG_LTO_NONE
    scripts/config --enable LTO_CLANG_FULL
    scripts/config --disable LTO_CLANG_THIN
    scripts/config --disable CONFIG_LTO_CLANG_THIN
    _LLVM=1
  fi

  if [ "$use_numa" = "n" ]; then
    msg2 "Disabling NUMA..."
    scripts/config --disable CONFIG_NUMA
  fi
  
  if [ "$_fsync"  = "n" ]; then
    msg2 "Disable Fsync support"
    scripts/config --disable CONFIG_FUTEX
    scripts/config --disable CONFIG_FUTEX_PI
  fi

  if [ "$_futex2" = "n" ]; then
    msg2 "Disable Futex2 support"
    scripts/config --disable CONFIG_FUTEX2
  fi
  
  if [ "$_winesync" = "y" ]; then
    msg2 "Enable winesync support"
    scripts/config --module CONFIG_WINESYNC
  fi

  if [ "$_damon" = "y" ]; then
    msg2 "Enabling DAMON Data Access Monitoring "
    scripts/config --enable CONFIG_DAMON
    scripts/config --enable CONFIG_DAMON_VADDR
    scripts/config --enable CONFIG_DAMON_DBGFS
    scripts/config --enable CONFIG_DAMON_PADDR
    scripts/config --enable CONFIG_DAMON_RECLAIM
  fi

  if [ "$_v4l2" = "y" ]; then
    msg2 "Enable v4l2loopback support"
    scripts/config --enable V4L2_LOOPBACK
  fi

  ### Build for Freq
  if [ -n "$_500hz" ]; then
    msg2 "Setting tick rate to 1k..."
    scripts/config --disable CONFIG_HZ_1000
    scripts/config --enable CONFIG_HZ_500
    scripts/config --set-val CONFIG_HZ 500
  fi

  if [ -n "$_833hz" ]; then
    msg2 "Setting tick rate to 750HZ..."
    scripts/config --disable CONFIG_HZ_1000
    scripts/config --enable CONFIG_HZ_833
    scripts/config --set-val CONFIG_HZ 833

  fi

  if [ -n "$_1666hz" ]; then
    msg2 "Setting tick rate to 600HZ..."
    scripts/config --disable CONFIG_HZ_1000
    scripts/config --enable CONFIG_HZ_1666
    scripts/config --set-val CONFIG_HZ 1666
  fi
  
### Enable Linux Random Number Generator
  if [ -n "$_lrng_enable" ]; then
    msg2 "Enabling Linux Random Number Generator ..."
    scripts/config --enable CONFIG_LRNG
    scripts/config --enable CONFIG_LRNG_OVERSAMPLE_ENTROPY_SOURCES
    scripts/config --set-val CONFIG_LRNG_OVERSAMPLE_ES_BITS 64
    scripts/config --set-val CONFIG_LRNG_SEED_BUFFER_INIT_ADD_BITS 128
    scripts/config --enable CONFIG_LRNG_CONTINUOUS_COMPRESSION_ENABLED
    scripts/config --disable CONFIG_LRNG_CONTINUOUS_COMPRESSION_DISABLED
    scripts/config --enable CONFIG_LRNG_ENABLE_CONTINUOUS_COMPRESSION
    scripts/config --enable CONFIG_LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION
    scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_512
    scripts/config --enable CONFIG_LRNG_COLLECTION_SIZE_1024
    scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_2048
    scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_4096
    scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_8192
    scripts/config --set-val CONFIG_LRNG_COLLECTION_SIZE 1024
    scripts/config --enable CONFIG_LRNG_HEALTH_TESTS
    scripts/config --set-val CONFIG_LRNG_RCT_CUTOFF 31
    scripts/config --set-val CONFIG_LRNG_APT_CUTOFF 325
    scripts/config --set-val CONFIG_LRNG_IRQ_ENTROPY_RATE 256
    scripts/config --enable CONFIG_LRNG_JENT
    scripts/config --set-val CONFIG_LRNG_JENT_ENTROPY_RATE 16
    scripts/config --set-val CONFIG_LRNG_CPU_ENTROPY_RATE 8
    scripts/config --enable CONFIG_LRNG_DRNG_SWITCH
    scripts/config --module CONFIG_LRNG_DRBG
    scripts/config --module CONFIG_LRNG_KCAPI
    scripts/config --enable CONFIG_LRNG_TESTING_MENU
    scripts/config --disable CONFIG_LRNG_RAW_HIRES_ENTROPY
    scripts/config --disable CONFIG_LRNG_RAW_JIFFIES_ENTROPY
    scripts/config --disable CONFIG_LRNG_RAW_IRQ_ENTROPY
    scripts/config --disable CONFIG_LRNG_RAW_IRQFLAGS_ENTROPY
    scripts/config --disable CONFIG_LRNG_RAW_RETIP_ENTROPY
    scripts/config --disable CONFIG_LRNG_RAW_REGS_ENTROPY
    scripts/config --disable CONFIG_LRNG_RAW_ARRAY
    scripts/config --disable CONFIG_LRNG_IRQ_PERF
    scripts/config --disable CONFIG_LRNG_ACVT_HASH
    scripts/config --enable CONFIG_LRNG_RUNTIME_ES_CONFIG
    scripts/config --disable CONFIG_LRNG_RUNTIME_MAX_WO_RESEED_CONFIG
    scripts/config --disable CONFIG_LRNG_TEST_CPU_ES_COMPRESSION
    scripts/config --enable CONFIG_LRNG_SELFTEST
    scripts/config --disable CONFIG_LRNG_SELFTEST_PANIC
    msg2 "Enabled LRNG"
  fi  
  
  #Enable TCP_CONG_BBR2
  msg2 "Enabling TCP_CONG_BBR2..."
  scripts/config --enable CONFIG_TCP_CONG_BBR2
  scripts/config --enable CONFIG_DEFAULT_BBR2
  scripts/config --set-str CONFIG_DEFAULT_TCP_CONG bbr2
  
  
 msg2 "Disabling TCP_CONG_CUBIC..."
 scripts/config --module CONFIG_TCP_CONG_CUBIC
 scripts/config --disable CONFIG_DEFAULT_CUBIC
  
  # KERNEL COMPRESSION ZSTD
 msg2 "Enable Kernel Compression ZSTD"
 scripts/config --set-val CONFIG_KERNEL_ZSTD_LEVEL 19
 scripts/config --enable CONFIG_KERNEL_ZSTD_LEVEL_ULTRA
  
  # Enable O2 Optimization
 msg2 "Enable O2 Optimization"
 scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_SIZE
 scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3
 scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE

 msg2 "Enable LRU"
 scripts/config --enable CONFIG_LRU_GEN
 scripts/config --set-val CONFIG_NR_LRU_GENS 7
 scripts/config --set-val CONFIG_TIERS_PER_GEN 4
 scripts/config --enable CONFIG_LRU_GEN_ENABLED
 scripts/config --disable CONFIG_LRU_GEN_STATS

  msg2 "Enable zram compression to ZSTD"
  scripts/config --disable CONFIG_ZRAM_DEF_COMP_LZORLE
  scripts/config --enable CONFIG_ZRAM_DEF_COMP_ZSTD
  scripts/config --set-str CONFIG_ZRAM_DEF_COMP zstd
  scripts/config --disable CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZ4
  scripts/config --enable CONFIG_ZSWAP_COMPRESSOR_DEFAULT_ZSTD
  scripts/config --set-str CONFIG_ZSWAP_COMPRESSOR_DEFAULT zstd

  msg2 "Change module compression to ZSTD"
  scripts/config --disable CONFIG_MODULE_COMPRESS_NONE
  scripts/config --enable CONFIG_MODULE_COMPRESS_ZSTD
  scripts/config --set-val CONFIG_MODULE_COMPRESS_ZSTD_LEVEL 19
  scripts/config --enable CONFIG_MODULE_COMPRESS_ZSTD_ULTRA
  scripts/config --set-val CONFIG_MODULE_COMPRESS_ZSTD_LEVEL_ULTRA 22

  msg2 "Enable NTFS + NTFS3"
  scripts/config --module CONFIG_NTFS_FS
  scripts/config --module CONFIG_NTFS3_FS
  scripts/config --enable CONFIG_NTFS3_64BIT_CLUSTER
  scripts/config --enable CONFIG_NTFS3_LZX_XPRESS
  scripts/config --enable CONFIG_NTFS3_FS_POSIX_ACL

  msg2 "Enable AMD PSTATE v2 driver"
  scripts/config --enable CONFIG_X86_AMD_PSTATE
  scripts/config --enable CONFIG_AMD_PTDMA

  msg2 "Enable Anbox"
  scripts/config --enable CONFIG_ASHMEM
  scripts/config --enable CONFIG_ANDROID
  scripts/config --enable CONFIG_ANDROID_BINDER_IPC
  scripts/config --enable CONFIG_ANDROID_BINDERFS
  scripts/config --enable CONFIG_ANDROID_BINDER_DEVICES="binder,hwbinder,vndbinder"
  


  # Let's user choose microarchitecture optimization in GCC
  sh ${srcdir}/choose-gcc-optimization.sh $_microarchitecture

  # This is intended for the people that want to build this package with their own config
  # Put the file "myconfig" at the package folder (this will take preference) or "${XDG_CONFIG_HOME}/linux-xanmod/myconfig"
  # If we detect partial file with scripts/config commands, we execute as a script
  # If not, it's a full config, will be replaced
  for _myconfig in "${SRCDEST}/myconfig" "${HOME}/.config/linux-xanmod/myconfig" "${XDG_CONFIG_HOME}/linux-xanmod/myconfig" ; do
    if [ -f "${_myconfig}" ] && [ "$(wc -l <"${_myconfig}")" -gt "0" ]; then
      if grep -q 'scripts/config' "${_myconfig}"; then
        # myconfig is a partial file. Executing as a script
        msg2 "Applying myconfig..."
        bash -x "${_myconfig}"
      else
        # myconfig is a full config file. Replacing default .config
        msg2 "Using user CUSTOM config..."
        cp -f "${_myconfig}" .config
      fi
      echo
      break
    fi
  done

  ### Optionally load needed modules for the make localmodconfig
  # See https://aur.archlinux.org/packages/modprobed-db
  if [ "$_localmodcfg" = "y" ]; then
    if [ -f $HOME/.config/modprobed.db ]; then
      msg2 "Running Steven Rostedt's make localmodconfig now"
      make LLVM=$_LLVM LLVM_IAS=$_LLVM LSMOD=$HOME/.config/modprobed.db localmodconfig
    else
      msg2 "No modprobed.db data found"
      exit 1
    fi
  fi

  make LLVM=$_LLVM LLVM_IAS=$_LLVM olddefconfig

  make -s kernelrelease > version
  msg2 "Prepared %s version %s" "$pkgbase" "$(<version)"

  [[ -z "$_makenconfig" ]] || make LLVM=$_LLVM LLVM_IAS=$_LLVM nconfig

  # save configuration for later reuse
  cat .config > "${SRCDEST}/config.last"
}

build() {
  cd linux-${_major}
    
  make LLVM=$_LLVM LLVM_IAS=$_LLVM all
}

_package() {
  pkgdesc="The Linux kernel and modules Custom with Xanmod patches and Task Type CPU Sched"
  depends=(coreutils kmod initramfs)
  optdepends=('crda: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(V4L2LOOPBACK-MODULE)
  replaces=()

  cd linux-${_major}
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  msg2 "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  msg2 "Installing modules..."
  make INSTALL_MOD_PATH="$pkgdir/usr" modules_install

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Header files and scripts for building modules for Xanmod Custom Linux kernel"

  cd linux-${_major}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  msg2 "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  msg2 "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # http://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # http://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  msg2 "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  msg2 "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  msg2 "Removing documentation..."
  rm -r "$builddir/Documentation"

  msg2 "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  msg2 "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  msg2 "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  msg2 "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et: